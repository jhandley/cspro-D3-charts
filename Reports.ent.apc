{Application 'REPORTS' logic file generated by CSPro}
PROC GLOBAL

file tempFile;
string reportDirectory;
string reportDataDirectory;

// Age/sex distribution
numeric numAgeGroups = 16;
numeric ageGroupSizeYears = 5;
array ageBySexDistribution(numAgeGroups, 2);

// Completed by day/enumerator
numeric firstDay = 20001215;
numeric daysInCensus = 15;
numeric maxEnumerators = 5;
array completedByDayByEnumerator(daysInCensus, maxEnumerators);
array string enumeratorNames(maxEnumerators);

// EA counts vs. expected
numeric maxEA = 100;
array householdsByEa(maxEA);

// Housing type
numeric maxHousingType = 9;
array housingTypes(maxHousingType);

// Household size report
numeric maxHouseholdSize = 30;
array householdSizes(maxHouseholdSize);

function string windowsSlashes(string path)

	numeric i;
	do i = 1 while i <= length(path)
		if path[i:1] = "/" then
			path[i:1] = "\";
		endif;
	enddo;
	windowsSlashes = path;
end

function showHtmlReport(string htmlFilename)
	string fullFilePath = reportDirectory + htmlFilename;

	if getos() in 20:29 then
		// Android - use "browse:"
		execsystem(maketext("html:file://%s", fullFilePath));
	else
		// Windows - use "explorer.exe <filename>"
		execsystem(maketext("%sexplorer.exe %s", 
						    pathname(Windows), 
						    windowsSlashes(fullFilePath)));
	endif;
end

function findOrAddEnumerator(string enumeratorName)

	numeric i;
	do i = 1 while i <= 3 and enumeratorNames(i) <> ""
		if enumeratorName = enumeratorNames(i) then
			findOrAddEnumerator = i;
			exit;
		endif;
	enddo;
	if i <= 3 then
		enumeratorNames(i) = enumeratorName;
		findOrAddEnumerator = i;
	else
		errmsg("Error: too many enumerators, increase the maximum");
	endif;
end

function interviewsCompletedByDayReport()
	
	numeric dayNum, enumeratorNum;
	
	// Clear out old values from array
	do enumeratorNum = 1 while enumeratorNum <= maxEnumerators
		enumeratorNames(enumeratorNum) = "";
		do dayNum = 1 while dayNum <= daysInCensus
			completedByDayByEnumerator(dayNum, enumeratorNum) = 0;
		enddo;
	enddo;
	
	// Loop through all households 
	// until loadcase returns zero when it hits end of file.
	// Build a frequency distribution of interviews by day in array completedByDay.
	locate(CEN2000, >=, "");
	while loadcase(CEN2000) <> 0 do
		dayNum = datediff(firstDay, INTERVIEW_DATE, "d") + 1;
		enumeratorNum = findOrAddEnumerator(strip(ENUMERATOR));
		inc(completedByDayByEnumerator(dayNum, enumeratorNum));
	enddo;

	// Convert from daily completed to cumulative
  	do dayNum = 2 while dayNum <= daysInCensus
  		numeric date = dateadd(firstDay, dayNum - 1, "d");
  		do enumeratorNum = 1 while enumeratorNames(enumeratorNum) <> ""
  			completedByDayByEnumerator(dayNum, enumeratorNum) = completedByDayByEnumerator(dayNum, enumeratorNum) + completedByDayByEnumerator(dayNum - 1, enumeratorNum);
		enddo;
	enddo;
			
	// Write days and number completed in JSON format:
	// var data = [
	//    {date: '20001215', interviewer1: 10, interviewer2: 10, interviewer3: 8},
	//    {date: '20001216', interviewer1: 12, interviewer12: 22, interviewer3: 13},
	//    ...
	// ];

	string reportDataFilename = maketext("%scompleted-by-day-by-enumerator-cumulative-data.js", reportDataDirectory);
	setfile(tempFile, reportDataFilename);
	filewrite(tempFile, "var data = [");
  	do dayNum = 1 while dayNum <= daysInCensus
  		date = dateadd(firstDay, dayNum - 1, "d");
  		string enumeratorResultString = "";
  		do enumeratorNum = 1 while enumeratorNames(enumeratorNum) <> ""
  			numeric completed = completedByDayByEnumerator(dayNum, enumeratorNum);
  			enumeratorResultString = enumeratorResultString + maketext("%s: %d,", enumeratorNames(enumeratorNum), completed); 
  		enddo;

  		filewrite(tempFile, "  {date: '%08d', %s},", date, enumeratorResultString); 
	enddo;
	filewrite(tempFile, "];");
	close(tempFile);

	showHtmlReport("completed-by-day-by-enumerator-cumulative.html");
end


function countsVsExpectedReport()

	// Clear out any old values
	numeric i;
	do i = 1 while i <= maxEa
		householdsByEa(i) = 0;
	enddo;
	
	// Loop through all households 
	// until loadcase returns zero when it hits end of file.
	locate(CEN2000, >=, "");	
	while loadcase(CEN2000) <> 0 do		
		inc(householdsByEa(EA));
	enddo;

	// Write out counts per EA to JSON array like:
	// var data = [
	//    {EA: 01, households: 5, expected: 21},
	//    {EA: 02, households: 8, expected: 32},
	//    ...
	// ];

	string reportDataFilename = maketext("%scounts-vs-expected-data.js", reportDataDirectory);
	setfile(tempFile, reportDataFilename);
	filewrite(tempFile, "var data = [");
  	do i = 1 while i <= maxEa
  		if householdsByEa(i) > 0 then
  			EC_EA = i;
  			if loadcase(EXPECTEDCOUNTS_DICT, EC_EA) then
		  		filewrite(tempFile, "  {EA: '%03d', households: %d, expected: %d},", 
		  				  i, householdsByEa(i), EC_HOUSEHOLDS);
		  	endif;
	  	endif;
	enddo;
	filewrite(tempFile, "];");
	close(tempFile);

	showHtmlReport("counts-vs-expected.html");

end;

function ageBySexReport(string reportFilename)

	numeric ageGroup;

	// Clear out values from previous run
	do ageGroup = 1 while ageGroup <= numAgeGroups
		ageBySexDistribution(ageGroup, 1) = 0;
		ageBySexDistribution(ageGroup, 2) = 0;
	enddo;
	
	numeric males = 0, females = 0;
	numeric topAgeGroupLowerBound = (numAgeGroups - 1) * ageGroupSizeYears;
	
	// Loop through all households 
	// until loadcase returns zero when it hits end of file.
	locate(CEN2000, >=, "");	
	while loadcase(CEN2000) <> 0 do
		
		// Loop through each individual in household
		numeric personNum;
		do personNum = 1 while personNum <= count(CEN2000.PERSON)
			if P04_AGE(personNum) <> notappl then
				ageGroup = int(P04_AGE(personNum)/ageGroupSizeYears) + 1;
				if ageGroup > numAgeGroups then
					ageGroup = numAgeGroups;
				endif;
				inc(ageBySexDistribution(ageGroup, P03_SEX(personNum)));
			endif;
		enddo;
	enddo;

	// Write out age by sex distribution to JSON array that looks like:
	// var data = [
	//    {group: '0-9', male: 10, female: 12, total: 22},
	//    {group: '10-19', male: 14, female: 15, total: 29},
	//    ...
	// ];

	string reportDataFilename = maketext("%s%s-data.js", reportDataDirectory, reportFilename);
	setfile(tempFile, reportDataFilename);
	filewrite(tempFile, "var data = [");
  	numeric groupNum;
  	do groupNum = 1 while groupNum <= numAgeGroups
  		numeric male = ageBySexDistribution(groupNum, 1);
  		numeric female = ageBySexDistribution(groupNum, 2);
  		numeric total = male + female;

		string groupLabel;
		if groupNum < numAgeGroups then
	  		numeric lowerBound = (groupNum - 1) * ageGroupSizeYears;
	  		numeric upperBound = groupNum * ageGroupSizeYears - 1;
			groupLabel = maketext("%d-%d", lowerBound, upperBound);
		else
			groupLabel = maketext("%d+", topAgeGroupLowerBound);
		endif;
  		filewrite(tempFile, "  {group: '%s', male: %d, female: %d, total: %d},", 
  				  groupLabel, male, female, total); 
	enddo;
	filewrite(tempFile, "];");
	close(tempFile);

	showHtmlReport(reportFilename + ".html");
end

function housingTypeReport()

	// Clear out any old values
	numeric i;
	do i = 1 while i <= maxHousingType
		housingTypes(i) = 0;
	enddo;

	// Loop through all households 
	// until loadcase returns zero when it hits end of file.
	locate(CEN2000, >=, "");	
	while loadcase(CEN2000) <> 0 do
		if H01_TYPE <> notappl then
			inc(housingTypes(H01_TYPE));
		endif;
	enddo;

	// Write out aggregated housing type to JSON array like:
	// var data = [
	//    {type: 'Single Family', count: 10},
	//    {type: 'Multi-Family', count: 14},
	//    ...
	// ];

	string reportDataFilename = maketext("%shousing-type-data.js", reportDataDirectory);
	setfile(tempFile, reportDataFilename);
	filewrite(tempFile, "var data = [");
  	do i = 1 while i <= maxHousingType
  		// Only count types that have a value set label so
  		// that don't include gaps in value set
  		string label = getlabel(H01_TYPE, i);
  		if label <> "" then
	  		filewrite(tempFile, "  {type: '%s', count: %d},", 
	  				  label, housingTypes(i)); 
	  	endif;
	enddo;
	filewrite(tempFile, "];");
	close(tempFile);

	showHtmlReport("housing-type.html");

end;

function householdSizeReport()

	// Clear out any old values
	numeric i;
	do i = 1 while i <= maxHouseholdSize
		householdSizes(i) = 0;
	enddo;

	numeric biggestFound = 0;
	
	// Loop through all households 
	// until loadcase returns zero when it hits end of file.
	locate(CEN2000, >=, "");	
	while loadcase(CEN2000) <> 0 do
		if H13_PERSONS <> notappl then
			inc(householdSizes(H13_PERSONS));
			if H13_PERSONS > biggestFound then
				biggestFound = H13_PERSONS;
			endif;
		endif;
	enddo;

	// Write out aggregated household sizesto JSON array like:
	// var data = [
	//    {size: 0, frequency: 10},
	//    {size: 1, frequency: 14},
	//    ...
	// ];

	string reportDataFilename = maketext("%shousehold-size-data.js", reportDataDirectory);
	setfile(tempFile, reportDataFilename);
	filewrite(tempFile, "var data = [");
  	do i = 1 while i <= biggestFound
  		filewrite(tempFile, "  {size: %d, frequency: %d},", 
  				  i, householdSizes(i)); 
	enddo;
	filewrite(tempFile, "];");
	close(tempFile);

	showHtmlReport("household-size.html");

end;


PROC REPORTS_FF
preproc
reportDirectory = pathname(Application) + "reports/";
reportDataDirectory = reportDirectory + "data/";
dircreate(reportDataDirectory);

PROC MENU

if MENU = 1 then
	interviewsCompletedByDayReport();
elseif MENU = 2 then
	countsVsExpectedReport();
elseif MENU = 3 then
	housingTypeReport();
elseif MENU = 4 then
	ageBySexReport("age-by-sex-table");
elseif MENU = 5 then
	ageBySexReport("population-pyramid");
elseif MENU = 6 then
	householdSizeReport();
elseif MENU = 9 then
	stop(1);
endif;

reenter;
