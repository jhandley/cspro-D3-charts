{Application 'REPORTS' logic file generated by CSPro}
PROC GLOBAL

string reportDirectory;
string reportDataDirectory;

function showHtmlReport(string htmlFilename)
	string fullFilePath = reportDirectory + htmlFilename;
	view(fullFilePath);
end

function interviewsCompletedByDayReport()
	
	numeric firstDay = 20001215;
	numeric daysInCensus = 15;
	
	hashmap completedByEnumeratorByDay(string, numeric) default(0);
	
	// Loop through all households 
	// Build a frequency distribution of interviews by day in hashmap completedByDayByEnumerator.
	forcase CEN2000 do
		inc(completedByEnumeratorByDay(ENUMERATOR, INTERVIEW_DATE));
	enddo;

	// Get the list of enumerators from the hashmap
	list string enumeratorNames;
	completedByEnumeratorByDay.getKeys(enumeratorNames);
	enumeratorNames.sort();
	
	// Convert from daily completed to cumulative
  	do numeric e = 1 while e <= enumeratorNames.length()
		string enumeratorName = enumeratorNames(e);
		do numeric dayNum = 2 while dayNum <= daysInCensus
			numeric day = dateadd(firstDay, dayNum - 1, "d");
			numeric previousDay = dateadd(day, -1, "d");
			completedByEnumeratorByDay(enumeratorName, day) = completedByEnumeratorByDay(enumeratorName, day) + completedByEnumeratorByDay(enumeratorName, previousDay);
		enddo;
	enddo;

	// Write days and number completed in JSON format:
	// var data = [
	//    {date: '20001215', interviewer1: 10, interviewer2: 10, interviewer3: 8},
	//    {date: '20001216', interviewer1: 12, interviewer12: 22, interviewer3: 13},
	//    ...
	// ];

	string reportDataFilename = maketext("%scompleted-by-day-by-enumerator-cumulative-data.js", reportDataDirectory);
	file tempFile;
	setfile(tempFile, reportDataFilename);
	filewrite(tempFile, "var data = [");
  	do numeric dayNum = 1 while dayNum <= daysInCensus
  		numeric date = dateadd(firstDay, dayNum - 1, "d");
  		string enumeratorResultString = "";
		do numeric e = 1 while e <= enumeratorNames.length()
  			numeric completed = completedByEnumeratorByDay(enumeratorNames(e), date);
  			enumeratorResultString = enumeratorResultString + maketext("%s: %d,", enumeratorNames(e), completed); 
  		enddo;

  		filewrite(tempFile, "  {date: '%08d', %s},", date, enumeratorResultString); 
	enddo;
	filewrite(tempFile, "];");
	close(tempFile);

	showHtmlReport("completed-by-day-by-enumerator-cumulative.html");
end


function countsVsExpectedReport()

	// Loop through all households and create a frequency distribution of EAs
	freq householdsByEa	include(EA)
	valueset(EA_VS1)
	nonetpercents
	distinct
	;
	
	forcase CEN2000 do
		householdsByEa.tally();
	enddo;

	// Write out counts per EA to JSON array like:
	// var data = [
	//    {EA: 01, households: 5, expected: 21},
	//    {EA: 02, households: 8, expected: 32},
	//    ...
	// ];

	string reportDataFilename = maketext("%scounts-vs-expected-data.js", reportDataDirectory);
	file tempFile;
	setfile(tempFile, reportDataFilename);
	filewrite(tempFile, "var data = [");
	numeric maxEA = 100;
  	do numeric i = 1 while i <= maxEa
  		if householdsByEa(i) > 0 then
  			EC_EA = i;
  			if loadcase(EXPECTEDCOUNTS_DICT, EC_EA) then
		  		filewrite(tempFile, "  {EA: '%03d', households: %d, expected: %d},", 
		  				  i, householdsByEa(i), EC_HOUSEHOLDS);
		  	endif;
	  	endif;
	enddo;
	filewrite(tempFile, "];");
	close(tempFile);

	showHtmlReport("counts-vs-expected.html");

end;

function ageBySexReport(string reportFilename)

	numeric numAgeGroups = 16;
	numeric ageGroupSizeYears = 5;
	hashmap ageBySexDistribution(numeric, numeric) default(0);

	numeric ageGroup;
	numeric males = 0, females = 0;
	numeric topAgeGroupLowerBound = (numAgeGroups - 1) * ageGroupSizeYears;
	
	// Loop through all households 
	forcase CEN2000 do
		
		// Loop through each individual in household
		numeric personNum;
		do personNum = 1 while personNum <= count(CEN2000.PERSON)
			if P04_AGE(personNum) <> notappl then
				ageGroup = int(P04_AGE(personNum)/ageGroupSizeYears) + 1;
				if ageGroup > numAgeGroups then
					ageGroup = numAgeGroups;
				endif;
				inc(ageBySexDistribution(ageGroup, P03_SEX(personNum)));
			endif;
		enddo;
	enddo;

	// Write out age by sex distribution to JSON array that looks like:
	// var data = [
	//    {group: '0-9', male: 10, female: 12, total: 22},
	//    {group: '10-19', male: 14, female: 15, total: 29},
	//    ...
	// ];

	string reportDataFilename = maketext("%s%s-data.js", reportDataDirectory, reportFilename);
	file tempFile;
	setfile(tempFile, reportDataFilename);
	filewrite(tempFile, "var data = [");
  	numeric groupNum;
  	do groupNum = 1 while groupNum <= numAgeGroups
  		numeric male = ageBySexDistribution(groupNum, 1);
  		numeric female = ageBySexDistribution(groupNum, 2);
  		numeric total = male + female;

		string groupLabel;
		if groupNum < numAgeGroups then
	  		numeric lowerBound = (groupNum - 1) * ageGroupSizeYears;
	  		numeric upperBound = groupNum * ageGroupSizeYears - 1;
			groupLabel = maketext("%d-%d", lowerBound, upperBound);
		else
			groupLabel = maketext("%d+", topAgeGroupLowerBound);
		endif;
  		filewrite(tempFile, "  {group: '%s', male: %d, female: %d, total: %d},", 
  				  groupLabel, male, female, total); 
	enddo;
	filewrite(tempFile, "];");
	close(tempFile);

	showHtmlReport(reportFilename + ".html");
end

function housingTypeReport()

	numeric maxHousingType = 9;

	freq housingTypes
	include(H01_TYPE)
	valueset(H01_TYPE_VS1)
	sort(by valueset)
	nonetpercents
	distinct
	;
	
	// Loop through all households 
	// until loadcase returns zero when it hits end of file.
	forcase CEN2000 do
		housingTypes.tally();
	enddo;

	// Write out aggregated housing type to JSON array like:
	// var data = [
	//    {type: 'Single Family', count: 10},
	//    {type: 'Multi-Family', count: 14},
	//    ...
	// ];

	string reportDataFilename = maketext("%shousing-type-data.js", reportDataDirectory);
	file tempFile;
	setfile(tempFile, reportDataFilename);
	filewrite(tempFile, "var data = [");
  	do numeric i = 1 while i <= maxHousingType
  		// Only count types that have a value set label so
  		// that don't include gaps in value set
  		string label = getlabel(H01_TYPE, i);
  		if label <> "" then
	  		filewrite(tempFile, "  {type: '%s', count: %d},", 
	  				  label, housingTypes(i)); 
	  	endif;
	enddo;
	filewrite(tempFile, "];");
	close(tempFile);

	showHtmlReport("housing-type.html");

end;

function householdSizeReport()

	freq householdSizes
	include(H13_PERSONS)
	valueset(H13_PERSONS_VS1)
	nonetpercents
	distinct
	;

	numeric biggestFound = 0;
	
	// Loop through all households 
	forcase CEN2000 do
	    householdSizes.tally();
		if H13_PERSONS <> notappl then
			if H13_PERSONS > biggestFound then
				biggestFound = H13_PERSONS;
			endif;
		endif;
	enddo;

	// Write out aggregated household sizesto JSON array like:
	// var data = [
	//    {size: 0, frequency: 10},
	//    {size: 1, frequency: 14},
	//    ...
	// ];

	string reportDataFilename = maketext("%shousehold-size-data.js", reportDataDirectory);
	file tempFile;
	setfile(tempFile, reportDataFilename);
	filewrite(tempFile, "var data = [");
  	do numeric i = 0 while i <= biggestFound
  		filewrite(tempFile, "  {size: %d, frequency: %d},", 
  				  i, householdSizes(i)); 
	enddo;
	filewrite(tempFile, "];");
	close(tempFile);

	showHtmlReport("household-size.html");

end;


PROC REPORTS_FF
preproc
reportDirectory = pathname(Application) + "reports/";
reportDataDirectory = reportDirectory + "data/";
dircreate(reportDataDirectory);

PROC MENU

if MENU = 1 then
	interviewsCompletedByDayReport();
elseif MENU = 2 then
	countsVsExpectedReport();
elseif MENU = 3 then
	housingTypeReport();
elseif MENU = 4 then
	ageBySexReport("age-by-sex-table");
elseif MENU = 5 then
	ageBySexReport("population-pyramid");
elseif MENU = 6 then
	householdSizeReport();
elseif MENU = 9 then
	stop(1);
endif;

reenter;
